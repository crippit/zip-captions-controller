import type { LogLevel } from '../module-api/enums.js';
import type { ParseVariablesInStringMessage, ParseVariablesInStringResponseMessage, SetActionDefinitionsMessage, ActionInstance, ExecuteActionMessage, LearnActionMessage, LearnActionResponseMessage, SetCustomVariableMessage } from '../host-api/api.js';
import type { CompanionActionDefinitions } from '../module-api/action.js';
export declare class ActionManager {
    #private;
    constructor(parseVariablesInString: (msg: ParseVariablesInStringMessage) => Promise<ParseVariablesInStringResponseMessage>, setActionDefinitions: (msg: SetActionDefinitionsMessage) => void, setCustomVariableValue: (msg: SetCustomVariableMessage) => void, log: (level: LogLevel, message: string) => void);
    handleExecuteAction(msg: ExecuteActionMessage): Promise<void>;
    handleUpdateActions(actions: {
        [id: string]: ActionInstance | null | undefined;
    }): void;
    handleLearnAction(msg: LearnActionMessage): Promise<LearnActionResponseMessage>;
    setActionDefinitions(actions: CompanionActionDefinitions): void;
    subscribeActions(actionIds: string[]): void;
    unsubscribeActions(actionIds: string[]): void;
}
//# sourceMappingURL=actions.d.ts.map